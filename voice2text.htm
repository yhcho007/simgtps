<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>실시간 음성 기록기</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            color: #1f2937;
        }
        #transcript {
            white-space: pre-wrap;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <div class="bg-white p-8 rounded-xl shadow-lg w-full max-w-2xl text-center">
        <h1 class="text-3xl font-bold mb-6 text-gray-800">실시간 음성 기록기</h1>
        <p class="mb-6 text-gray-600">아래 '시작' 버튼을 누르고 말하면, 음성이 한글 텍스트로 변환됩니다. 발화자가 바뀌면 '발화자 변경' 버튼을 눌러주세요.</p>

        <div class="mb-8 flex justify-center space-x-4">
            <button id="startButton" class="bg-blue-600 text-white font-semibold py-3 px-6 rounded-full shadow-md hover:bg-blue-700 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                <span id="startText">시작</span>
            </button>
            <button id="speakerButton" class="bg-gray-500 text-white font-semibold py-3 px-6 rounded-full shadow-md hover:bg-gray-600 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2">
                발화자 변경
            </button>
            <button id="saveButton" class="bg-green-600 text-white font-semibold py-3 px-6 rounded-full shadow-md hover:bg-green-700 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
                회의록 저장
            </button>
        </div>

        <div id="outputBox" class="bg-gray-100 p-6 rounded-lg text-left break-words overflow-auto h-96">
            <p id="transcript" class="text-gray-700 leading-relaxed"></p>
            <p id="interimTranscript" class="text-gray-400 leading-relaxed italic"></p>
        </div>

        <div id="statusMessage" class="mt-4 text-red-500 font-medium hidden"></div>

    </div>

    <script>
        const startButton = document.getElementById('startButton');
        const startText = document.getElementById('startText');
        const speakerButton = document.getElementById('speakerButton');
        const saveButton = document.getElementById('saveButton');
        const transcriptElement = document.getElementById('transcript');
        const interimTranscriptElement = document.getElementById('interimTranscript');
        const statusMessage = document.getElementById('statusMessage');

        // Check for SpeechRecognition API support
        window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

        if (!window.SpeechRecognition) {
            statusMessage.textContent = '죄송합니다. 이 브라우저는 음성 인식을 지원하지 않습니다. Chrome 브라우저를 사용해 주세요.';
            statusMessage.classList.remove('hidden');
        } else {
            const recognition = new SpeechRecognition();
            recognition.lang = 'ko-KR'; // Set to Korean
            recognition.interimResults = true; // Show interim results
            recognition.continuous = true; // Continuous recognition

            let isListening = false;
            let finalTranscript = '';
            let speakerCounter = 'A';

            // Function to generate the next speaker's initial (A, B, C...)
            function getNextSpeaker() {
                if (speakerCounter === 'A') {
                    speakerCounter = 'B';
                    return 'B';
                } else if (speakerCounter === 'B') {
                    speakerCounter = 'C';
                    return 'C';
                } else {
                    // For simplicity, reset to A after C.
                    speakerCounter = 'A';
                    return 'A';
                }
            }

            // Start of speech recognition
            recognition.onstart = () => {
                isListening = true;
                startText.textContent = '듣는 중...';
                startButton.classList.remove('bg-blue-600', 'hover:bg-blue-700');
                startButton.classList.add('bg-red-600', 'hover:bg-red-700');
                statusMessage.classList.add('hidden');

                // Add the initial speaker prefix when starting
                if (finalTranscript === '') {
                    finalTranscript += `${speakerCounter}: `;
                    transcriptElement.textContent = finalTranscript;
                }
            };

            // Result event handler
            recognition.onresult = (event) => {
                let interimTranscript = '';
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    const transcript = event.results[i][0].transcript;
                    if (event.results[i].isFinal) {
                        finalTranscript += transcript + ' ';
                    } else {
                        interimTranscript += transcript;
                    }
                }
                transcriptElement.textContent = finalTranscript;
                interimTranscriptElement.textContent = interimTranscript;
            };

            // Error event handler
            recognition.onerror = (event) => {
                console.error(event.error);
                statusMessage.textContent = `오류 발생: ${event.error}`;
                statusMessage.classList.remove('hidden');
            };

            // End of speech recognition
            recognition.onend = () => {
                isListening = false;
                startText.textContent = '시작';
                startButton.classList.remove('bg-red-600', 'hover:bg-red-700');
                startButton.classList.add('bg-blue-600', 'hover:bg-blue-700');
                interimTranscriptElement.textContent = ''; // Clear interim text
            };

            // Start/Stop button click event
            startButton.addEventListener('click', () => {
                if (isListening) {
                    recognition.stop();
                } else {
                    recognition.start();
                }
            });

            // Change Speaker button click event
            speakerButton.addEventListener('click', () => {
                if (isListening) {
                    const nextSpeaker = getNextSpeaker();
                    finalTranscript += `\n\n${nextSpeaker}: `;
                    transcriptElement.textContent = finalTranscript;
                    interimTranscriptElement.textContent = '';
                } else {
                    statusMessage.textContent = '음성 인식 시작 후 발화자를 변경할 수 있습니다.';
                    statusMessage.classList.remove('hidden');
                }
            });

            // Save File button click event
            saveButton.addEventListener('click', () => {
                const date = new Date();
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                const seconds = String(date.getSeconds()).padStart(2, '0');

                const filename = `${year}${month}${day}_${hours}${minutes}${seconds}.txt`;

                const blob = new Blob([finalTranscript], { type: 'text/plain;charset=utf-8' });
                const a = document.createElement('a');
                a.href = URL.createObjectURL(blob);
                a.download = filename;
                a.style.display = 'none';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(a.href);
            });
        }
    </script>
</body>
</html>
